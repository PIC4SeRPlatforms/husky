microstrain:
  # Standalone example params file for GX3, GX4, GX/CX5, RQ1 and GQ7 series devices
  microstrain_inertial_driver:
    ros__parameters:
      # Note: Feature support is device-dependent and some of the following settings may have no affect on your device.
      # Please consult your device's documentation for supported features

      # ****************************************************************** 
      # NOTE: This file is formatted to work with ROS and will not work if specified as the params_file argument in ROS2.
      #       If you want to override parameters for ROS2, start with https://github.com/LORD-MicroStrain/microstrain_inertial/blob/ros2/microstrain_inertial_driver/config/empty.yml
      # ****************************************************************** 

      # ****************************************************************** 
      # General Settings 
      # ****************************************************************** 

      # port is the main port that the device will communicate over. For all devices except the GQ7, this is the only available port.
      # aux_port is only available for the GQ7 and is only needed when streaming RTCM corrections to the device from ROS, or if you want to publish NMEA sentences from this node
      port        : "/dev/microstrain_gx5"
      aux_port    : "/dev/ttyACM1"
      baudrate    : 115200
      debug       : false
      diagnostics : true

      # Frame IDs used in the different messages. By default these are set to arbitrary strings as not to interfere with other ROS services.
      # For more information on common frame IDs, check out: https://www.ros.org/reps/rep-0105.html
      #
      # filter_frame_id and filter_child_frame_id are specifically useful as the node will also publish a transform to the /tf topic
      # that contains the transform between these two frames. Many ROS tools such as RViz will use the /tf topic to display things like robot position.
      imu_frame_id          : "imu_link"
      gnss1_frame_id        : "gnss1_antenna_wgs84"
      gnss2_frame_id        : "gnss2_antenna_wgs84"
      filter_frame_id       : "imu_link"
      filter_child_frame_id : "sensor"
      nmea_frame_id         : "nmea"

      # Waits for a configurable amount of time until the device exists
      # If poll_max_tries is set to -1 we will poll forever until the device exists
      poll_port      : True
      poll_rate_hz   : 0.1
      poll_max_tries : -1

      # Controls if the driver outputs data with-respect-to ENU frame
      #      false - position, velocity, and orientation are WRT the NED frame (native device frame)
      #      true  - position, velocity, and orientation are WRT the ENU frame
      use_enu_frame : true

      # Controls if the driver-defined setup is sent to the device
      #      false - The driver will ignore the settings below and use the device's current settings
      #      true  - Overwrite the current device settings with those listed below
      device_setup : True

      # Controls if the driver-defined settings are saved
      #      false - Do not save the settings
      #      true  - Save the settings in the device's non-volatile memory
      save_settings : False

      # Controls if the driver uses the device generated timestamp (if available) for timestamping messages
      #      false - Use PC received time for timestamping
      #      true  - Use device generated timestamp
      use_device_timestamp : False

      # Controls if the driver uses ROS time for timestamping messages. Can be useful when running under simulation.
      # NOTE: This can be used in conjunction with use_device_timestamp in which case, the device timestmap will be used for sensor_msgs/TimeReference messages, and ROS time will be used for all other messages
      #       false - Use PC received time for timestamping
      #       true  - Use ROS time for timestamping all non sensor_msgs/TimeReference messages
      use_ros_time : False

      # Controls if the driver creates a raw binary file
      #      false - Do not create the file
      #      true  - Create the file
      #
      #      Notes: 1) The filename will have the following format -
      #                model_number "_" serial_number "_" datetime (year_month_day_hour_minute_sec) ".bin"
      #                example: "3DM-GX5-45_6251.00001_20_12_01_01_01_01.bin"
      #             2) This file is useful for getting support from the manufacturer
      raw_file_enable : False

      # (GQ7 only) Controls if the driver requests additional factory support data to be included in the raw data file
      #      false - Do not request the additional data
      #      true  - Request the additional channels (please see notes below!)
      #
      #      Notes: **We recommend only enabling this feature when specifically requested by Microstrain.**
      #      
      #      Including this feature increases communication bandwidth requirements significantly... for serial data connections
      #      please ensure the baudrate is sufficient for the added data channels.     
      raw_file_include_support_data : False

      # The directory to store the raw data file (no trailing '/')
      raw_file_directory : "/home/your_name"


      # ****************************************************************** 
      # IMU Settings 
      # ****************************************************************** 

      publish_imu   : True
      imu_data_rate : 100

      # The speed at which the individual IMU publishers will publish at.
      #      If set to -1, will use imu_data_rate to determine the rate at which to stream and publish
      #      If set to 0, the stream will be turned off and the publisher will not be created
      imu_raw_data_rate      : -1  # Rate of imu/data topic
      imu_mag_data_rate      : -1  # Rate of mag topic
      imu_gps_corr_data_rate : -1  # Rate of gps_corr topic
                                  # Note that this is still dependent on publish_gps_corr being set to True in order to publish

      # Static IMU message covariance values (the device does not generate these) 
      # Since internally these are std::vector we need to use the rosparam tags 
      imu_orientation_cov : [0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01]
      imu_linear_cov      : [0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01]
      imu_angular_cov     : [0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01]

      # If enabled, this message can be used to validate time IMU time syncronzation with gps 
      # It is most useful when using an external timesource and external PPS
      # (see: filter_enable_external_gps_time_update) 
      publish_gps_corr : False

      # ****************************************************************** 
      # Kalman Filter Settings (only applicable for devices with a Kalman Filter) 
      # ****************************************************************** 

      publish_filter   : True
      filter_data_rate : 10

      # The speed at which the individual Filter publishers will publish at.
      #      If set to -1, will use filter_data_rate to determine the rate at which to stream and publish
      #      If set to 0, the stream will be turned off and the publisher will not be created
      #
      #      Note: The parameters' "filter_odom_data_rate", "filter_imu_data_rate", "filter_relative_odom_data_rate" associated ROS messages share several MIP fields,
      #            so if more than one is set to stream, and they are set to stream at different rates, messages will be published on both topics, at the higher rate
      filter_status_data_rate                     : -1  # Rate of nav/status topic
      filter_heading_data_rate                    : -1  # Rate of nav/heading topic
      filter_heading_state_data_rate              : -1  # Rate of nav/heading_state topic
      filter_odom_data_rate                       : -1  # Rate of nav/odom topic
      filter_imu_data_rate                        : -1  # Rate of nav/filtered_imu/data
      filter_relative_odom_data_rate              : -1  # Rate of nav/relative_pos topic and the transform between filter_frame_id and filter_child_frame_id
                                                        # Note that this is still dependent on publish_relative_position being set to True in order to publish
                                                        # Note that this data rate will also control the rate at which the transform between "filter_frame_id" and "filter_child_frame_id" will be published at
      filter_aiding_status_data_rate              : -1  # Rate of gnss1/aiding_status and gnss2/aiding_status topics
                                                        # Note that this is still dependent on filter_enable_gnss_pos_vel_aiding being set to True in order to publish
      filter_gnss_dual_antenna_data_rate          : -1  # Rate of nav/dual_antenna_status topic
                                                        # Note that this is still dependent on filter_enable_gnss_heading_aiding being set to True in order to publish
      filter_aiding_measurement_summary_data_rate : -1  # Rate of nav/aiding_summary topic
                                                        # Note that this is still dependent on publish_filter_aiding_measurement_summary being set to True in order to publish

      # Sensor2vehicle frame transformation selector
      #     0 = None, 1 = Euler Angles, 2 - matrix, 3 - quaternion
      #     Notes: These are different ways of setting the same parameter in the device.
      #            The different options are provided as a convenience.
      #            Support for matrix and quaternion options is firmware version dependent (GQ7 supports Quaternion as of firmware 1.0.07)
      #            Quaternion order is [i, j, k, w]
      filter_sensor2vehicle_frame_selector : 0

      filter_sensor2vehicle_frame_transformation_euler      : [0.0, 0.0, 0.0]
      filter_sensor2vehicle_frame_transformation_matrix     : [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0]
      filter_sensor2vehicle_frame_transformation_quaternion : [0.0, 0.0, 0.0, 1.0]

        # Controls if the Kalman filter is reset after the settings are configured
      filter_reset_after_config : True

      # Controls if the Kalman filter will auto-init or requires manual initialization
      filter_auto_init : True

      # (All, except -10, and -15 products) Declination Source 1 = None, 2 = magnetic model, 3 = manual 
      filter_declination_source : 3
      filter_declination        : 0.053953712

      # (All, except GQ7, -10, and -15 products) Heading Source 0 = None, 1 = magnetic, 2 = GNSS velocity (note: see manual for limitations)  
      filter_heading_source : 1

      # (GX5 and previous,-45 models only) Dynamics Mode 1 = Portable (default), 2 = Automotive, 3 = Airborne (<2Gs), 4 = Airborne High G (<4Gs) 
      filter_dynamics_mode : 1

      # Controls what kind of linear acceleration data is used in the Filter IMU message.
      #      If this is set to true, the acceleration will not factor out gravity, if set to false gravity will be filtered out of the linear acceleration.
      filter_use_compensated_accel : True

      # ZUPT control 
      filter_velocity_zupt_topic : "moving_vel"
      filter_angular_zupt_topic  : "moving_ang"
      filter_velocity_zupt       : True
      filter_angular_zupt        : True

      # (GQ7 full support, GX5-45 limited support) Adaptive filter settings
      #      Adaptive level: 0 - off, 1 - Conservative, 2 = Moderate (default), 3 = agressive
      #      Time limit: Max duration of measurement rejection prior to recovery, in milliseconds - default = 15000 
      filter_adaptive_level         : 2
      filter_adaptive_time_limit_ms : 15000







